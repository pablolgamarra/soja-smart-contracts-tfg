/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace ContratoGranosSoja {
      
    export type IdentificadorPartesStruct = {comprador: AddressLike, vendedor: AddressLike, intermediario: AddressLike}

    export type IdentificadorPartesStructOutput = [comprador: string, vendedor: string, intermediario: string] & {comprador: string, vendedor: string, intermediario: string }
  

    export type CondicionesComercialesStruct = {incoterm: string, fleteACargoDe: string, puntoControlCalidad: string, cantidadToneladas: BigNumberish, precioPorTonelada: BigNumberish, tipoContrato: BigNumberish, fechaEntrega: BigNumberish, lugarEntrega: string, condicionesCalidad: string}

    export type CondicionesComercialesStructOutput = [incoterm: string, fleteACargoDe: string, puntoControlCalidad: string, cantidadToneladas: bigint, precioPorTonelada: bigint, tipoContrato: bigint, fechaEntrega: bigint, lugarEntrega: string, condicionesCalidad: string] & {incoterm: string, fleteACargoDe: string, puntoControlCalidad: string, cantidadToneladas: bigint, precioPorTonelada: bigint, tipoContrato: bigint, fechaEntrega: bigint, lugarEntrega: string, condicionesCalidad: string }
  

    export type CondicionesEconomicasStruct = {modalidadPago: string, montoTotal: BigNumberish}

    export type CondicionesEconomicasStructOutput = [modalidadPago: string, montoTotal: bigint] & {modalidadPago: string, montoTotal: bigint }
  

    export type PenalizacionIncumplimientoStruct = {accionIncumplimiento: BigNumberish, porcentajeDescuento: BigNumberish, arbitro: AddressLike}

    export type PenalizacionIncumplimientoStructOutput = [accionIncumplimiento: bigint, porcentajeDescuento: bigint, arbitro: string] & {accionIncumplimiento: bigint, porcentajeDescuento: bigint, arbitro: string }
  

    export type ContratoStruct = {identificadorPartes: ContratoGranosSoja.IdentificadorPartesStruct, tipoProducto: string, condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStruct, condicionesEconomicas: ContratoGranosSoja.CondicionesEconomicasStruct, penalizacionIncumplimiento: ContratoGranosSoja.PenalizacionIncumplimientoStruct, hashVersionContrato: string, evidenceURI: string, estado: BigNumberish}

    export type ContratoStructOutput = [identificadorPartes: ContratoGranosSoja.IdentificadorPartesStructOutput, tipoProducto: string, condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStructOutput, condicionesEconomicas: ContratoGranosSoja.CondicionesEconomicasStructOutput, penalizacionIncumplimiento: ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, hashVersionContrato: string, evidenceURI: string, estado: bigint] & {identificadorPartes: ContratoGranosSoja.IdentificadorPartesStructOutput, tipoProducto: string, condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStructOutput, condicionesEconomicas: ContratoGranosSoja.CondicionesEconomicasStructOutput, penalizacionIncumplimiento: ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, hashVersionContrato: string, evidenceURI: string, estado: bigint }
  
    }

  export interface ContratoGranosSojaInterface extends Interface {
    getFunction(nameOrSignature: "aplicarPenalizacion" | "approve" | "balanceOf" | "confirmarEntregaMetaTx" | "contadorContratos" | "contratos" | "crearContrato" | "firmarContratoMetaTx" | "getApproved" | "isApprovedForAll" | "isTrustedForwarder" | "name" | "obtenerContratos" | "owner" | "ownerOf" | "pagar" | "relayer" | "renounceOwnership" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "setRelayer" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom" | "transferOwnership" | "trustedForwarder"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "ContratoCerrado" | "ContratoCreado" | "ContratoFirmado" | "EntregaConfirmada" | "OwnershipTransferred" | "PagoEjecutado" | "PenalizacionAplicada" | "RelayerActualizado" | "Transfer"): EventFragment;

    encodeFunctionData(functionFragment: 'aplicarPenalizacion', values: [BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'confirmarEntregaMetaTx', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'contadorContratos', values?: undefined): string;
encodeFunctionData(functionFragment: 'contratos', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'crearContrato', values: [ContratoGranosSoja.IdentificadorPartesStruct, ContratoGranosSoja.CondicionesComercialesStruct, string, BigNumberish, BigNumberish, AddressLike, string]): string;
encodeFunctionData(functionFragment: 'firmarContratoMetaTx', values: [BigNumberish, string, string]): string;
encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'isApprovedForAll', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'obtenerContratos', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'pagar', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'relayer', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256)', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'setApprovalForAll', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'setRelayer', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'trustedForwarder', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'aplicarPenalizacion', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'confirmarEntregaMetaTx', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'contadorContratos', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'contratos', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'crearContrato', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'firmarContratoMetaTx', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'obtenerContratos', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pagar', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'relayer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRelayer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'trustedForwarder', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, approved: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
      export interface OutputObject {owner: string, approved: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ApprovalForAllEvent {
      export type InputTuple = [owner: AddressLike, operator: AddressLike, approved: boolean];
      export type OutputTuple = [owner: string, operator: string, approved: boolean];
      export interface OutputObject {owner: string, operator: string, approved: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ContratoCerradoEvent {
      export type InputTuple = [idContrato: BigNumberish, nuevoEstado: BigNumberish];
      export type OutputTuple = [idContrato: bigint, nuevoEstado: bigint];
      export interface OutputObject {idContrato: bigint, nuevoEstado: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ContratoCreadoEvent {
      export type InputTuple = [idContrato: BigNumberish, comprador: AddressLike, vendedor: AddressLike];
      export type OutputTuple = [idContrato: bigint, comprador: string, vendedor: string];
      export interface OutputObject {idContrato: bigint, comprador: string, vendedor: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ContratoFirmadoEvent {
      export type InputTuple = [idContrato: BigNumberish, vendedor: AddressLike, consentHash: string, evidenceURI: string];
      export type OutputTuple = [idContrato: bigint, vendedor: string, consentHash: string, evidenceURI: string];
      export interface OutputObject {idContrato: bigint, vendedor: string, consentHash: string, evidenceURI: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EntregaConfirmadaEvent {
      export type InputTuple = [idContrato: BigNumberish, vendedor: AddressLike];
      export type OutputTuple = [idContrato: bigint, vendedor: string];
      export interface OutputObject {idContrato: bigint, vendedor: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PagoEjecutadoEvent {
      export type InputTuple = [idContrato: BigNumberish, monto: BigNumberish];
      export type OutputTuple = [idContrato: bigint, monto: bigint];
      export interface OutputObject {idContrato: bigint, monto: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PenalizacionAplicadaEvent {
      export type InputTuple = [idContrato: BigNumberish, monto: BigNumberish, motivo: string];
      export type OutputTuple = [idContrato: bigint, monto: bigint, motivo: string];
      export interface OutputObject {idContrato: bigint, monto: bigint, motivo: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelayerActualizadoEvent {
      export type InputTuple = [oldRelayer: AddressLike, newRelayer: AddressLike];
      export type OutputTuple = [oldRelayer: string, newRelayer: string];
      export interface OutputObject {oldRelayer: string, newRelayer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [from: string, to: string, tokenId: bigint];
      export interface OutputObject {from: string, to: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ContratoGranosSoja extends BaseContract {
    
    connect(runner?: ContractRunner | null): ContratoGranosSoja;
    waitForDeployment(): Promise<this>;

    interface: ContratoGranosSojaInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    aplicarPenalizacion: TypedContractMethod<
      [_idContrato: BigNumberish, _motivo: string, ],
      [void],
      'nonpayable'
    >
    

    
    approve: TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    confirmarEntregaMetaTx: TypedContractMethod<
      [_idContrato: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    contadorContratos: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    contratos: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[ContratoGranosSoja.IdentificadorPartesStructOutput, string, ContratoGranosSoja.CondicionesComercialesStructOutput, ContratoGranosSoja.CondicionesEconomicasStructOutput, ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, string, string, bigint] & {identificadorPartes: ContratoGranosSoja.IdentificadorPartesStructOutput, tipoProducto: string, condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStructOutput, condicionesEconomicas: ContratoGranosSoja.CondicionesEconomicasStructOutput, penalizacionIncumplimiento: ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, hashVersionContrato: string, evidenceURI: string, estado: bigint }],
      'view'
    >
    

    
    crearContrato: TypedContractMethod<
      [_identificadorPartes: ContratoGranosSoja.IdentificadorPartesStruct, _condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStruct, _modalidadPago: string, _accionIncumplimiento: BigNumberish, _porcentajeDescuento: BigNumberish, _arbitro: AddressLike, _hashVersionContrato: string, ],
      [void],
      'nonpayable'
    >
    

    
    firmarContratoMetaTx: TypedContractMethod<
      [_idContrato: BigNumberish, consentHash: string, evidenceURI: string, ],
      [void],
      'nonpayable'
    >
    

    
    getApproved: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    isApprovedForAll: TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isTrustedForwarder: TypedContractMethod<
      [forwarder: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    obtenerContratos: TypedContractMethod<
      [],
      [ContratoGranosSoja.ContratoStructOutput[]],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerOf: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    pagar: TypedContractMethod<
      [_idContrato: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    relayer: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    setApprovalForAll: TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setRelayer: TypedContractMethod<
      [_relayer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    supportsInterface: TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    tokenURI: TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    trustedForwarder: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'aplicarPenalizacion'): TypedContractMethod<
      [_idContrato: BigNumberish, _motivo: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [owner: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'confirmarEntregaMetaTx'): TypedContractMethod<
      [_idContrato: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'contadorContratos'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'contratos'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[ContratoGranosSoja.IdentificadorPartesStructOutput, string, ContratoGranosSoja.CondicionesComercialesStructOutput, ContratoGranosSoja.CondicionesEconomicasStructOutput, ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, string, string, bigint] & {identificadorPartes: ContratoGranosSoja.IdentificadorPartesStructOutput, tipoProducto: string, condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStructOutput, condicionesEconomicas: ContratoGranosSoja.CondicionesEconomicasStructOutput, penalizacionIncumplimiento: ContratoGranosSoja.PenalizacionIncumplimientoStructOutput, hashVersionContrato: string, evidenceURI: string, estado: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'crearContrato'): TypedContractMethod<
      [_identificadorPartes: ContratoGranosSoja.IdentificadorPartesStruct, _condicionesComerciales: ContratoGranosSoja.CondicionesComercialesStruct, _modalidadPago: string, _accionIncumplimiento: BigNumberish, _porcentajeDescuento: BigNumberish, _arbitro: AddressLike, _hashVersionContrato: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'firmarContratoMetaTx'): TypedContractMethod<
      [_idContrato: BigNumberish, consentHash: string, evidenceURI: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getApproved'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'isApprovedForAll'): TypedContractMethod<
      [owner: AddressLike, operator: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isTrustedForwarder'): TypedContractMethod<
      [forwarder: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'obtenerContratos'): TypedContractMethod<
      [],
      [ContratoGranosSoja.ContratoStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerOf'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'pagar'): TypedContractMethod<
      [_idContrato: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'relayer'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'safeTransferFrom(address,address,uint256,bytes)'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, data: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setApprovalForAll'): TypedContractMethod<
      [operator: AddressLike, approved: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRelayer'): TypedContractMethod<
      [_relayer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'supportsInterface'): TypedContractMethod<
      [interfaceId: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'tokenURI'): TypedContractMethod<
      [tokenId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, tokenId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'trustedForwarder'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'ApprovalForAll'): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
getEvent(key: 'ContratoCerrado'): TypedContractEvent<ContratoCerradoEvent.InputTuple, ContratoCerradoEvent.OutputTuple, ContratoCerradoEvent.OutputObject>;
getEvent(key: 'ContratoCreado'): TypedContractEvent<ContratoCreadoEvent.InputTuple, ContratoCreadoEvent.OutputTuple, ContratoCreadoEvent.OutputObject>;
getEvent(key: 'ContratoFirmado'): TypedContractEvent<ContratoFirmadoEvent.InputTuple, ContratoFirmadoEvent.OutputTuple, ContratoFirmadoEvent.OutputObject>;
getEvent(key: 'EntregaConfirmada'): TypedContractEvent<EntregaConfirmadaEvent.InputTuple, EntregaConfirmadaEvent.OutputTuple, EntregaConfirmadaEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PagoEjecutado'): TypedContractEvent<PagoEjecutadoEvent.InputTuple, PagoEjecutadoEvent.OutputTuple, PagoEjecutadoEvent.OutputObject>;
getEvent(key: 'PenalizacionAplicada'): TypedContractEvent<PenalizacionAplicadaEvent.InputTuple, PenalizacionAplicadaEvent.OutputTuple, PenalizacionAplicadaEvent.OutputObject>;
getEvent(key: 'RelayerActualizado'): TypedContractEvent<RelayerActualizadoEvent.InputTuple, RelayerActualizadoEvent.OutputTuple, RelayerActualizadoEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'ApprovalForAll(address,address,bool)': TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
      ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    

      'ContratoCerrado(uint256,uint8)': TypedContractEvent<ContratoCerradoEvent.InputTuple, ContratoCerradoEvent.OutputTuple, ContratoCerradoEvent.OutputObject>;
      ContratoCerrado: TypedContractEvent<ContratoCerradoEvent.InputTuple, ContratoCerradoEvent.OutputTuple, ContratoCerradoEvent.OutputObject>;
    

      'ContratoCreado(uint256,address,address)': TypedContractEvent<ContratoCreadoEvent.InputTuple, ContratoCreadoEvent.OutputTuple, ContratoCreadoEvent.OutputObject>;
      ContratoCreado: TypedContractEvent<ContratoCreadoEvent.InputTuple, ContratoCreadoEvent.OutputTuple, ContratoCreadoEvent.OutputObject>;
    

      'ContratoFirmado(uint256,address,string,string)': TypedContractEvent<ContratoFirmadoEvent.InputTuple, ContratoFirmadoEvent.OutputTuple, ContratoFirmadoEvent.OutputObject>;
      ContratoFirmado: TypedContractEvent<ContratoFirmadoEvent.InputTuple, ContratoFirmadoEvent.OutputTuple, ContratoFirmadoEvent.OutputObject>;
    

      'EntregaConfirmada(uint256,address)': TypedContractEvent<EntregaConfirmadaEvent.InputTuple, EntregaConfirmadaEvent.OutputTuple, EntregaConfirmadaEvent.OutputObject>;
      EntregaConfirmada: TypedContractEvent<EntregaConfirmadaEvent.InputTuple, EntregaConfirmadaEvent.OutputTuple, EntregaConfirmadaEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PagoEjecutado(uint256,uint256)': TypedContractEvent<PagoEjecutadoEvent.InputTuple, PagoEjecutadoEvent.OutputTuple, PagoEjecutadoEvent.OutputObject>;
      PagoEjecutado: TypedContractEvent<PagoEjecutadoEvent.InputTuple, PagoEjecutadoEvent.OutputTuple, PagoEjecutadoEvent.OutputObject>;
    

      'PenalizacionAplicada(uint256,uint256,string)': TypedContractEvent<PenalizacionAplicadaEvent.InputTuple, PenalizacionAplicadaEvent.OutputTuple, PenalizacionAplicadaEvent.OutputObject>;
      PenalizacionAplicada: TypedContractEvent<PenalizacionAplicadaEvent.InputTuple, PenalizacionAplicadaEvent.OutputTuple, PenalizacionAplicadaEvent.OutputObject>;
    

      'RelayerActualizado(address,address)': TypedContractEvent<RelayerActualizadoEvent.InputTuple, RelayerActualizadoEvent.OutputTuple, RelayerActualizadoEvent.OutputObject>;
      RelayerActualizado: TypedContractEvent<RelayerActualizadoEvent.InputTuple, RelayerActualizadoEvent.OutputTuple, RelayerActualizadoEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    
    };
  }